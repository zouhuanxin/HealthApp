package com.graduation.healthapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.graduation.healthapp.data.model.LaunchPageAd;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAUNCH_PAGE_AD".
*/
public class LaunchPageAdDao extends AbstractDao<LaunchPageAd, Long> {

    public static final String TABLENAME = "LAUNCH_PAGE_AD";

    /**
     * Properties of entity LaunchPageAd.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Keyid = new Property(0, Long.class, "keyid", true, "_id");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property Introduce = new Property(2, String.class, "introduce", false, "INTRODUCE");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Isable = new Property(4, Boolean.class, "isable", false, "ISABLE");
        public final static Property Createdtime = new Property(5, String.class, "createdtime", false, "CREATEDTIME");
        public final static Property Updatedtime = new Property(6, String.class, "updatedtime", false, "UPDATEDTIME");
        public final static Property Effectiveday = new Property(7, int.class, "effectiveday", false, "EFFECTIVEDAY");
    }


    public LaunchPageAdDao(DaoConfig config) {
        super(config);
    }
    
    public LaunchPageAdDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAUNCH_PAGE_AD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: keyid
                "\"ID\" INTEGER," + // 1: id
                "\"INTRODUCE\" TEXT," + // 2: introduce
                "\"URL\" TEXT," + // 3: url
                "\"ISABLE\" INTEGER," + // 4: isable
                "\"CREATEDTIME\" TEXT," + // 5: createdtime
                "\"UPDATEDTIME\" TEXT," + // 6: updatedtime
                "\"EFFECTIVEDAY\" INTEGER NOT NULL );"); // 7: effectiveday
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_LAUNCH_PAGE_AD_ID ON \"LAUNCH_PAGE_AD\"" +
                " (\"ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAUNCH_PAGE_AD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LaunchPageAd entity) {
        stmt.clearBindings();
 
        Long keyid = entity.getKeyid();
        if (keyid != null) {
            stmt.bindLong(1, keyid);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(3, introduce);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        Boolean isable = entity.getIsable();
        if (isable != null) {
            stmt.bindLong(5, isable ? 1L: 0L);
        }
 
        String createdtime = entity.getCreatedtime();
        if (createdtime != null) {
            stmt.bindString(6, createdtime);
        }
 
        String updatedtime = entity.getUpdatedtime();
        if (updatedtime != null) {
            stmt.bindString(7, updatedtime);
        }
        stmt.bindLong(8, entity.getEffectiveday());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LaunchPageAd entity) {
        stmt.clearBindings();
 
        Long keyid = entity.getKeyid();
        if (keyid != null) {
            stmt.bindLong(1, keyid);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(3, introduce);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        Boolean isable = entity.getIsable();
        if (isable != null) {
            stmt.bindLong(5, isable ? 1L: 0L);
        }
 
        String createdtime = entity.getCreatedtime();
        if (createdtime != null) {
            stmt.bindString(6, createdtime);
        }
 
        String updatedtime = entity.getUpdatedtime();
        if (updatedtime != null) {
            stmt.bindString(7, updatedtime);
        }
        stmt.bindLong(8, entity.getEffectiveday());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LaunchPageAd readEntity(Cursor cursor, int offset) {
        LaunchPageAd entity = new LaunchPageAd( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // keyid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // introduce
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isable
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createdtime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // updatedtime
            cursor.getInt(offset + 7) // effectiveday
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LaunchPageAd entity, int offset) {
        entity.setKeyid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIntroduce(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsable(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setCreatedtime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdatedtime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEffectiveday(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LaunchPageAd entity, long rowId) {
        entity.setKeyid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LaunchPageAd entity) {
        if(entity != null) {
            return entity.getKeyid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LaunchPageAd entity) {
        return entity.getKeyid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
